#!/usr/bin/python

import sys
import argparse
import urllib
import traceback


class Nagios:
    OK = 0
    WARNING = 1
    CRITICAL = 2
    UNKNOWN = 3
    DEPENDENT = 4


class GraphiteGraphSource:
    def __init__(self, url):
        if not url.endswith('&rawData'):
            url += '&rawData'
        self.url = url
        self._data = None
        self._graphs = None

    def fetch(self):
        self._data = urllib.urlopen(self.url).read()

    @property
    def data(self):
        if self._data is None:
            self.fetch()

        return self._data

    @property
    def graphs(self):
        if self._graphs is None:
            self._graphs = map(GraphiteGraph.from_rawdata, self.data.split())

        return self._graphs


class GraphiteGraph:
    def __init__(self, target, sample_period, data_points):
        self.target = target
        self.sample_period = sample_period
        self.data_points = data_points

    def latest_nonzero_value(self, seconds):
        data_value = 0.0

        if seconds <= self.sample_period:
            for data_value in reversed(self.data_points):
                if data_value:
                    break
        else:
            # if we requested more than on graphite sample period, work out how
            # many sample periods we wanted (python always rounds division *down*)
            num_data_points = (seconds/self.sample_period)
            data_set = filter(None, self.data_points[-num_data_points:])
            if data_set:
                data_value = float(sum(data_set) / len(data_set))

        return data_value

    @classmethod
    def from_rawdata(cls, raw_data):
        target, rest = raw_data.split(',', 1)
        time_info, rest = rest.split('|', 1)
        _start, _end, sample_period = map(int, time_info.split(','))
        data_points = list((float(x) if x != 'None' else None) for x in rest.split(','))

        return cls(target, sample_period, data_points)


def get_hw_value(graphs, seconds=0):
    """Get the Holt-Winters value from a Graphite graph"""

    graphite_data = graphite_lower = graphite_upper = 0

    for graph in graphs:
        value = graph.latest_nonzero_value(seconds)

        if graph.target.startswith('holtWintersConfidenceUpper'):
            graphite_upper = value
        elif graph.target.startswith('holtWintersConfidenceLower'):
            graphite_lower = value
        else:
            graphite_data = value

    return graphite_data, graphite_lower, graphite_upper


def check_hw_data(url, seconds, critupper = False, critlower = False, **kwds):
    graphs = GraphiteGraphSource(url).graphs
    current, lower, upper = get_hw_value(graphs, seconds)
    print (
        'Current value: %s, lower band: %s, upper band: %s' %
        (current, lower, upper)
    )

    if (current > upper):
        if critupper:
            return Nagios.CRITICAL
        else:
            return Nagios.WARNING
    elif (current < lower):
        if critlower:
            return Nagios.CRITICAL
        else:
            return Nagios.WARNING

    return Nagios.OK


def check_diff_data(diff1, diff2, seconds, crit, warn, reverse = False, **kwds):
    values = [GraphiteGraphSource(u).graphs[0].latest_nonzero_value(seconds) for u in (diff1, diff2)]
    current = abs(values[0] - values[1])

    return simple_graph_comparator(current, crit, warn, reverse)


def check_single_data(url, seconds, crit, warn, reverse = False, **kwds):
    value = GraphiteGraphSource(url).graphs[0].latest_nonzero_value(seconds)
    return simple_graph_comparator(value, crit, warn, reverse)


def simple_graph_comparator(current, crit, warn, reverse):
    print (
        'Current value: %s, warn threshold: %s, crit threshold: %s' %
        (current, warn, crit)
    )

    sign = -1 if reverse else 1
    if (sign * (current - crit)) >= 0:
        return Nagios.CRITICAL
    elif (sign * (current - warn)) >= 0:
        return Nagios.WARNING
    else:
        return Nagios.OK


def build_parser():
    parser = argparse.ArgumentParser()

    parser.add_argument("-W", "--holt-winters", dest = 'hw', action = 'store_true', help = 'Perform a Holt-Winters check')
    parser.add_argument("-U", "--critupper", dest = 'critupper', action = 'store_true', help = 'Upper Holt-Winters band breach causes a crit, breaching lower band causes a warn')
    parser.add_argument("-L", "--critlower", dest = 'critlower', action = 'store_true', help = 'Lower Holt-Winters band breach causes a crit, breaching upper band causes a warn')
    parser.add_argument("-r", "--reverse", dest = 'reverse', default = False, action = 'store_true', help = 'Reverse - Alert when the value is UNDER warn/crit instead of OVER')
    parser.add_argument('-u', '--url', dest = 'url', type = str, help = 'Graphite graph URL')
    parser.add_argument('-c', '--crit', dest = 'crit', type = float, help = 'Critical threshold')
    parser.add_argument('-w', '--warn', dest = 'warn', type = float, help = 'Warning threshold')
    parser.add_argument("-s", "--seconds", dest = 'seconds', default = 0, type = int, help = 'Average over the last N seconds of data')
    parser.add_argument("--d1", dest = 'diff1', type = str, help = 'Diff the latest values between two graphs (requires d2 be set')
    parser.add_argument("--d2", dest = 'diff2', type = str, help = 'Diff the latest values between two graphs (requires d1 be set')
    parser.add_argument("-T", "--test_threshold", default = None, type=float)

    return parser


def main(argv):
    parser = build_parser()

    def bail():
        parser.print_help()
        return Nagios.UNKNOWN

    try:
        args = parser.parse_args(argv)
    except argparse.ArgumentError, e:
        print str(e)
        return bail()

    mode = None
    if args.hw:
        mode = check_hw_data
    elif args.warn and args.crit:
        if args.diff1 and args.diff2:
            mode = check_diff_data
        elif args.url:
            mode = check_single_data

    if mode is None:
        return bail()

    return mode(**vars(args))


if __name__ == '__main__':
    exit_code = Nagios.UNKNOWN
    try:
        exit_code = main(sys.argv[1:])
    except Exception, e:
        traceback.print_exc()

    sys.exit(exit_code)
